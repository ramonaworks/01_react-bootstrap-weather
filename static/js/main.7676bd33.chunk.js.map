{"version":3,"sources":["logo.svg","components/Navigationmenu.js","components/Titles.js","components/Form.js","components/Weather.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navigationmenu","Navbar","expand","className","Brand","src","logo","alt","React","Component","Titles","Jumbotron","Form","props","onSubmit","getWeather","type","name","placeholder","Weather","city","country","temperature","humidity","description","error","Footer","API_KEY","App","state","undefined","e","a","preventDefault","target","elements","value","fetch","api_call","json","data","setState","main","temp","sys","weather","this","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7676bd33.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.564975ac.svg\";","import React from \"react\"; \r\nimport logo from '../logo.svg';\r\nimport {Navbar} from 'react-bootstrap';\r\n\r\nclass Navigationmenu extends React.Component{\r\n    render() {\r\n        return(\r\n            <div>\r\n                <Navbar expand=\"lg\" className=\"App-logo\">\r\n                    <Navbar.Brand> \r\n                        <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n                    </Navbar.Brand>\r\n                </Navbar> \r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Navigationmenu;\r\n","import React from \"react\";\r\nimport { Jumbotron } from 'react-bootstrap';\r\n\r\nclass Titles extends React.Component{\r\n    render() {\r\n        return(\r\n            <div>\r\n                <Jumbotron>\r\n                <h1 className=\"text-left\"> A Weather Application:</h1>\r\n                <h4 className=\"text-left\"> using JavaScript React, Open Weather API and Bootstrap</h4>\r\n                </Jumbotron>\r\n                \r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Titles;","import React from \"react\";\r\n\r\nconst Form = props => (\r\n    <form className=\"text-center\" onSubmit={props.getWeather}>\r\n        <input className=\"formFieldsPadding\" type=\"text\" name=\"city\" placeholder=\"City...\" />\r\n        <input className=\"formFieldsPadding\" type=\"text\" name=\"country\" placeholder=\"Country...\" />\r\n        <button className=\"btn-lg btn-success\">What's the weather like?</button>\r\n    </form>\r\n);\r\n \r\nexport default Form;","import React from \"react\";\r\n\r\nconst Weather = props =>(\r\n    <div> \r\n            {\r\n                props.city && props.country && \r\n                    <p>Location: \r\n                         <span>  {props.city},  {props.country}  </span>\r\n                    </p>\r\n            }\r\n\r\n            {\r\n                props.temperature &&  \r\n                <p>Temperature: \r\n                        <span> {props.temperature}  </span>\r\n                </p> \r\n            }\r\n\r\n            {\r\n                props.humidity &&     \r\n                <p>Humidity: \r\n                        <span> {props.humidity} </span>\r\n                </p> \r\n            }\r\n\r\n            {\r\n                props.description &&  \r\n                <p>Description: \r\n                        <span> {props.description}</span> \r\n                </p> \r\n            }\r\n\r\n            {\r\n                props.error && \r\n                <p>Error:  \r\n                        <span>{props.error} </span>\r\n                </p> \r\n            }\r\n         \r\n        </div>\r\n);\r\n\r\nexport default Weather;\r\n","import React from \"react\";\r\n\r\n class Footer extends React.Component{\r\n    render(){\r\n        return(\r\n<div>\r\n                {/* Created by Ramona, <a href=\"https://ramonaworks.com\">@Ramonaworks</a> */}\r\n            <blockquote className=\"footer blockquote text-right mt-4 pt-4\">\r\n                <h3 className=\"mb-0\">You are the sky. Everything else &#8212; it's just the weather.</h3>\r\n                <h5 className=\"blockquote-footer text-right pb-4\">Pema Chodron </h5>\r\n            </blockquote>\r\n</div>\r\n        )\r\n    }\r\n};\r\nexport default Footer;","import React from 'react'; \nimport Navigationmenu from './components/Navigationmenu';\nimport Titles from './components/Titles';\nimport Form from \"./components/Form\";\nimport Weather from \"./components/Weather\";\nimport Footer from './components/Footer';\nimport 'bootstrap/dist/css/bootstrap.min.css'; \nimport './App.css';\nconst API_KEY = \"ac0a2b93b8329c50e9af21e5105b45ca\";\n\nclass App extends React.Component {\n  \n  state = { temperature: undefined, city: undefined, country: undefined, humidity: undefined,\n            description: undefined, error: undefined }\n\n  getWeather = async (e) => {\n    e.preventDefault();\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n    const api_call = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city},${country},id=524901&APPID=${API_KEY}`);\n    const data = await api_call.json();\n    \n    \n        if(city && country){\n          //console.log(data); \n          this.setState({    \n            temperature: data.main.temp,\n            city: data.name,\n            country: data.sys.country,\n            humidity: data.main.humidity,\n            description: data.weather[0].description,  \n            error: \"\"\n          });\n        }else{\n           this.setState({    \n            temperature: undefined,\n            city: undefined,\n            country: undefined,\n            humidity: undefined,\n            description: undefined, \n            error: \"Please enter the values\"\n          });\n        }\n\n  }\n\nrender() {\n      return(<div className=\"App container-fluid\">\n\n      <header className=\"App-header\"> \n        <Navigationmenu/> \n      </header>\n\n      <main className=\"App-content\">\n      <Titles/>\n       \n                <Form getWeather={this.getWeather} />\n                      <Weather \n                            temperature={this.state.temperature} \n                            city={this.state.city}\n                            country={this.state.country}\n                            humidity={this.state.humidity}\n                            description={this.state.description}\n                            error={this.state.error}\n                      />\n\n      <Footer/>\n      </main>\n      </div>);\n    }\n};\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom'; \nimport \"typeface-parisienne\"; import \"typeface-righteous\";\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}